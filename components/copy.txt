
		var aes256 = require('aes256');

		// This creates an icon in the left ribbon..
		const ribbonIconEl = this.addRibbonIcon('lock', 'PasswordVaultPlugin', (evt: MouseEvent) => {
			// Called when the user clicks the icon.

			//Check if the file is encrypted..
			if (false){
				console.log('File is encrypted')
				new PasswordPrompt(this.app, (password: string) => {

					var decryptedPlainText = aes256.decrypt(password, process.env.pwSECRET);
					console.log(`Password: ${password}, Decrypted: ${decryptedPlainText} and Original: ${process.env.SECRET_KEY}`)

					if (process.env.SECRET_KEY == decryptedPlainText){
						new Notice(`Password correct, your data will be decrypted.`);
						

					}else{
						new Notice(`Please, check your password.`);

					}
				}).open();
			}
			else{
				console.log('File is NOT encrypted')

				if (process.env.pwSECRET == ""){
					new NewPasswordPrompt(this.app, (password: string) => {
						var encryptedPassword = aes256.encrypt(password, process.env.SECRET_KEY);
						process.env.pwSECRET = encryptedPassword
						
						//Write it in .env file.
						var fs = require('fs');
						fs.writeFile(envPath, `pwSECRET="${process.env.pwSECRET}"\nSECRET_KEY="${process.env.SECRET_KEY}"`, 
						function (err: any, file: any) {
						if (err) throw err;
						console.log('Password Updated');
					  });						

					}).open();
				}else{
					new PasswordPrompt(this.app, (password: string) => {

						var decryptedPlainText = aes256.decrypt(password, process.env.pwSECRET);
						console.log(`Password: ${password}, Decrypted: ${decryptedPlainText} and Original: ${process.env.SECRET_KEY}`)

						if (process.env.SECRET_KEY == decryptedPlainText){
							new Notice(`Password correct, your data will be encrypted.`);

							cryptoSource.setUserSecretKey(password); //derive the secret key via scrypt from user's password.
							
							// close open notes to prevent post-encryption access, which can corrupt files and make them irrecoverable
							const emptyLeaf = async (leaf: WorkspaceLeaf): Promise<void> => {
								leaf.setViewState({type:'empty'});
							}

							const closeLeaves = async (): Promise<void> => { // we use this function construction to get async/await and keep the right "this"
								let leaves: WorkspaceLeaf[] = [];

								this.app.workspace.iterateAllLeaves( (leaf) => {
									leaves.push(leaf);
								});

								for (const leaf of leaves){
									if( leaf.view instanceof FileView ){
										await emptyLeaf(leaf);
										leaf.detach();
									}
								}
							}

							const processFiles = async (): Promise<void> => {
								await closeLeaves();
								cryptoSource.fileProcessor(files, 'DECRYPT'); 
							}
							
							//run the encryption or decryption
							const vaultPath = (app.vault.adapter as any).basePath
							let files = cryptoSource.getVaultFiles(vaultPath, this.settings.file_name);
							console.log(files)
							processFiles();


						}else{
							new Notice(`Please, check your password.`);

						}
					}).open();
				}

			}
		});
		*/


			// Perform additional things with the ribbon
		//ribbonIconEl.addClass('my-plugin-ribbon-class');

		// This adds a status bar item to the bottom of the app. Does not work on mobile apps.
		//const statusBarItemEl = this.addStatusBarItem();
		//statusBarItemEl.setText('Status Bar Text');
		/*
		// This adds an editor command that can perform some operation on the current editor instance
		this.addCommand({
			id: 'sample-editor-command',
			name: 'Sample editor command',
			editorCallback: (editor: Editor, view: MarkdownView) => {
				console.log(editor.getSelection());
				editor.replaceSelection('Sample Editor Command');
			}
		});
		// This adds a complex command that can check whether the current state of the app allows execution of the command
		this.addCommand({
			id: 'open-sample-modal-complex',
			name: 'Open sample modal (complex)',
			checkCallback: (checking: boolean) => {
				// Conditions to check
				const markdownView = this.app.workspace.getActiveViewOfType(MarkdownView);
				if (markdownView) {
					// If checking is true, we're simply "checking" if the command can be run.
					// If checking is false, then we want to actually perform the operation.
					if (!checking) {
						new SampleModal(this.app).open();
					}

					// This command will only show up in Command Palette when the check function returns true
					return true;
				}
			}
		});
		*/
		// This adds a settings tab so the user can configure various aspects of the plugin
		this.addSettingTab(new SampleSettingTab(this.app, this));
		/*
		// If the plugin hooks up any global DOM events (on parts of the app that doesn't belong to this plugin)
		// Using this function will automatically remove the event listener when this plugin is disabled.
		this.registerDomEvent(document, 'click', (evt: MouseEvent) => {
			console.log('click', evt);
		});

		// When registering intervals, this function will automatically clear the interval when the plugin is disabled.
		this.registerInterval(window.setInterval(() => new Notice('Testing...'), 5 * 60 * 1000));

		*/